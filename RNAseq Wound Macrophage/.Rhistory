# library
library(DESeq2)
library(clusterProfiler)
library(limma)
library(fgsea)
library(ggpubr)
library(FactoMineR)
library(factoextra)
library(sva)
library(org.Mm.eg.db)
library(GSVA)
library(GO.db)
library(ggplotify)
library(ComplexHeatmap)
library(circlize)
library(paletteer)
library(tidyverse)
# global options
rm(list = ls())
dir.create("./RData")
# load data
count <- read.table(file = "./rawData/GSE252899_raw_counts.txt.gz", sep = "\t", header = T, row.names = 1)
# remove duplicated genes
IDs <- bitr(rownames(count), fromType = "REFSEQ", toType = "SYMBOL", OrgDb = "org.Mm.eg.db")
count <- count[rownames(count) %in% IDs$REFSEQ,]
IDs <- IDs[match(rownames(count), IDs$REFSEQ),]
counts <- avereps(count, ID = IDs$SYMBOL) %>% round()
# sample annotation informations
phenoData <- data.frame(sample = colnames(counts),
group = factor(c("TA", "TA", "TA", "WT", "WT", "WT"), levels = c("WT", "TA")))
phenoData$batch <- factor(c("B1", "B1", "B2", "B1", "B1", "B2"))
# build DESeqDataSet
dds <- DESeqDataSetFromMatrix(counts,
colData = phenoData,
design = ~group+batch)
# remove low expressed genes
dim(dds)
cps <- fpm(dds)
keep1 <- rowSums(cps >= 1) >= ceiling(ncol(dds)*3/4)
dds <- dds[keep1, ]
dim(dds)
# call DESeq function
dds <- DESeq(dds)
# get log2 scaled matrix
exprSet <- rlogTransformation(dds, blind = FALSE) %>% assay()
IDs <- IDs[match(rownames(exprSet), IDs$SYMBOL),]
res <- results(dds, contrast = c("group","TA","WT"))
dif <- as.data.frame(res) %>% na.omit()
dif$symbol <- rownames(dif)
save(counts, exprSet, dds, phenoData,IDs,dif,res, file = "./RData/result_DESeq2.RData")
#### Fig. XXX ####
rm(list = ls())
load("./RData/result_DESeq2.RData")
geneList <- dif$log2FoldChange;head(geneList)
StoE <- bitr(dif$symbol, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Mm.eg.db")
names(geneList) <- as.character(dif$symbol);head(geneList)
geneList <- geneList[names(geneList) %in% StoE$SYMBOL]
names(geneList) <- as.character(StoE$ENTREZID[match(names(geneList), StoE$SYMBOL)]);head(geneList)
geneList <- sort(geneList,decreasing = T);head(geneList)
buildGseaList<- function(species) {
require(clusterProfiler)
require(tidyverse)
R.utils::setOption("clusterProfiler.download.method",'auto')
keggList <- download_KEGG(species = species, keggType = "KEGG", keyType = "kegg")
keggRef <- keggList$KEGGPATHID2NAME
keggPath <- keggList$KEGGPATHID2EXTID
keggPath$from <- keggRef$to[match(keggPath$from, keggRef$from)]
keggPath <- split(keggPath$to, keggPath$from)
keggPath
}
keggList <- buildGseaList(species = "mmu")
names(keggList) <- gsub(" - Mus .*", "", names(keggList))
goList <- toTable(org.Mm.egGO2ALLEGS)
goList <- goList[goList$Ontology == "BP",]
goAnn <- toTable(GOTERM)[,2:3]
goList$term <- goAnn$Term[match(goList$go_id, goAnn$go_id)]
goList <- split(goList$gene_id, goList$term)
#### Fig. XXX ####
rm(list = ls())
load("./RData/result_DESeq2.RData")
dat <- as.data.frame(t(exprSet))
pca <- PCA(dat, graph = FALSE)
fviz_pca_ind(pca,
label = "all",
axes = c(1,2),
title = "BMDM",
pointsize = 2.5,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))
mod <- model.matrix(~as.factor(group), data = phenoData)
exprSet_batch <- ComBat(dat = exprSet, batch = phenoData$batch, mod = mod)
dat <- as.data.frame(t(exprSet_batch))
pca <- PCA(dat, graph = FALSE)
p.pca <- fviz_pca_ind(pca,
label = "none",
axes = c(1,2),
title = "BMDM",
pointsize = 7,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))+
scale_color_manual(values = c("#A0A0A4", "#E64B35"), breaks=c("WT", "TA"), labels=c("+/+", "A/A"))+
theme(plot.title = element_text(hjust = 0.5))+
xlim(-200, 200)+ylim(-200,200)
p.pca
buildGseaList <- function(species, selected) {
require(clusterProfiler)
require(tidyverse)
keggList <- download_KEGG(species = species)
keggRef <- keggList$KEGGPATHID2NAME %>% filter(to %in% selected)
keggPath <- keggList$KEGGPATHID2EXTID %>% filter(from %in% keggRef$from)
keggPath$from <- keggRef$to[match(keggPath$from, keggRef$from)]
keggPath <- split(keggPath$to, keggPath$from)
keggPath
}
geneList <- buildGseaList(species = "mmu",
selected = c("Fatty acid biosynthesis - Mus musculus (house mouse)",
"Fatty acid degradation - Mus musculus (house mouse)",
"Oxidative phosphorylation - Mus musculus (house mouse)",
"Glycolysis / Gluconeogenesis - Mus musculus (house mouse)",
"Pentose phosphate pathway - Mus musculus (house mouse)"))
IDss <- bitr(rownames(exprSet_batch), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Mm.eg.db")
entrezMatrix <- exprSet_batch[IDss$SYMBOL,]
rownames(entrezMatrix) <- IDss$ENTREZID
# ssGSEA
mmNor <- function(x){(x-min(x))/(max(x)-min(x))}
# ssGSEA
metaScore <- gsva(entrezMatrix,
geneList,
method = "ssgsea",
kcdf = "Gaussian",
abs.ranking = T)  %>% t() %>% scale() %>% as.data.frame()
colnames(metaScore) <- gsub(" ", "_", colnames(metaScore))
colnames(metaScore) <- gsub("-", "_", colnames(metaScore))
#### Fig. XXX ####
rm(list = ls())
load("result_DESeq2.RData")
load("./RData/result_DESeq2.RData")
dif <- dif[abs(dif$log2FoldChange)>=0.5 & dif$pvalue <=0.05, ]
# parameters for column annotations
colMeta <- phenoData[,1:2] %>%
column_to_rownames("sample")
colAnn <- HeatmapAnnotation(
df = colMeta,
col = list(
group = c('WT' = "#A0A0A4",
'TA' = "#5e90b8")
),
which = 'column',
# parameters for labels
annotation_label = c("Group"),
annotation_name_gp = gpar(fontsize = 10),
# parameters for legend
annotation_legend_param = list(
group = list(
title = 'Group',
title_position = 'topleft',
legend_direction = 'vertical',
title_gp = gpar(fontsize = 12, fontface = 'bold'),
labels_gp = gpar(fontsize = 10)))
)
# parameters for cell colors
bk <- seq(-1.5, 1.5, length.out = 100)
color <- colorRampPalette(c("#5e90b8", "white", "#f1939c"))(100)
matrix <- exprSet_batch[dif$symbol,] %>% t %>% scale() %>% t
rm(list = ls())
load("result_DESeq2.RData")
load("./RData/result_DESeq2.RData")
goList <- toTable(org.Mm.egGO2ALLEGS)
goList <- goList[goList$Ontology == "BP",]
View(phenoData)
# library
library(DESeq2)
library(clusterProfiler)
library(limma)
library(fgsea)
library(ggpubr)
library(FactoMineR)
library(factoextra)
library(sva)
library(org.Mm.eg.db)
library(GSVA)
library(GO.db)
library(ggplotify)
library(ComplexHeatmap)
library(circlize)
library(paletteer)
library(tidyverse)
# global options
# global options
rm(list = ls())
# create dir
dir.create("./rawData")
setwd("~/")
setwd("E:/Bioinformatics/RNAseq/Data/ZSM/github/Macrophage_Reparative/RNAseq Wound Macrophage")
# global options
rm(list = ls())
# create dir
dir.create("./rawData")
dir.create("./RData")
# load data
count <- read.table(file = "./rawData/raw_counts.txt.gz", sep = "\t", header = T, row.names = 1)
# load data
count <- read.table(file = "./rawData/raw_counts.txt", sep = "\t", header = T, row.names = 1)
View(count)
# remove duplicated genes
IDs <- bitr(rownames(count), fromType = "REFSEQ", toType = "SYMBOL", OrgDb = "org.Mm.eg.db")
count <- count[rownames(count) %in% IDs$REFSEQ,]
IDs <- IDs[match(rownames(count), IDs$REFSEQ),]
counts <- avereps(count, ID = IDs$SYMBOL) %>% round()
# sample annotation informations
phenoData <- data.frame(sample = colnames(counts),
group = factor(c("TA", "TA", "TA", "WT", "WT", "WT"), levels = c("WT", "TA")))
View(phenoData)
count <- count[,!grepl("WT1", colnames(count))]
View(count)
write.table(count, file = "./rawData/raw_counts.txt", sep = "\t", row.names = T, col.names = T, quote = F)
# global options
rm(list = ls())
# load data
count <- read.table(file = "./rawData/raw_counts.txt", sep = "\t", header = T, row.names = 1)
# remove duplicated genes
IDs <- bitr(rownames(count), fromType = "REFSEQ", toType = "SYMBOL", OrgDb = "org.Mm.eg.db")
count <- count[rownames(count) %in% IDs$REFSEQ,]
IDs <- IDs[match(rownames(count), IDs$REFSEQ),]
counts <- avereps(count, ID = IDs$SYMBOL) %>% round()
# sample annotation informations
phenoData <- data.frame(sample = colnames(counts),
group = factor(c(rep("TA", 6), rep("WT", 6)), levels = c("WT", "TA")))
View(phenoData)
phenoData$batch <- "wound_mac"
# build DESeqDataSet
dds <- DESeqDataSetFromMatrix(counts,
colData = phenoData,
design = ~group)
# remove low expressed genes
dim(dds)
cps <- fpm(dds)
keep1 <- rowSums(cps >= 1) >= ceiling(ncol(dds)*3/4)
dds <- dds[keep1, ]
dim(dds)
# call DESeq function
dds <- DESeq(dds)
# get log2 scaled matrix
exprSet <- rlogTransformation(dds, blind = FALSE) %>% assay()
IDs <- IDs[match(rownames(exprSet), IDs$SYMBOL),]
res <- results(dds, contrast = c("group","TA","WT"))
dif <- as.data.frame(res) %>% na.omit()
dif$symbol <- rownames(dif)
View(dif)
save(counts, exprSet, dds, phenoData,IDs,dif,res, file = "./RData/result_wound.RData")
#### Fig. XXX ####
rm(list = ls())
load("./RData/result_wound.RData")
dat <- as.data.frame(t(exprSet))
pca <- PCA(dat, graph = FALSE)
fviz_pca_ind(pca,
label = "all",
axes = c(1,2),
title = "BMDM",
pointsize = 2.5,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))
fviz_pca_ind(pca,
label = "none",
axes = c(1,2),
title = "BMDM",
pointsize = 7,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))+
scale_color_manual(values = c("#A0A0A4", "#E64B35"), breaks=c("WT", "TA"), labels=c("+/+", "A/A"))+
theme(plot.title = element_text(hjust = 0.5))+
xlim(-200, 200)+ylim(-200,200)
p.pca <- fviz_pca_ind(pca,
label = "none",
axes = c(1,2),
title = "BMDM",
pointsize = 7,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))+
scale_color_manual(values = c("#A0A0A4", "#E64B35"), breaks=c("WT", "TA"), labels=c("+/+", "A/A"))+
theme(plot.title = element_text(hjust = 0.5))+
xlim(-150, 150)+ylim(-150,150)
p.pca
p.pca <- fviz_pca_ind(pca,
label = "none",
axes = c(1,2),
title = "Wound macrophage",
pointsize = 7,
pointshape = 19,
addEllipses = F,
mean.point = FALSE,
habillage = as.factor(phenoData$group))+
scale_color_manual(values = c("#A0A0A4", "#E64B35"), breaks=c("WT", "TA"), labels=c("+/+", "A/A"))+
theme(plot.title = element_text(hjust = 0.5))+
xlim(-150, 150)+ylim(-150,150)
p.pca
pdf(file = "./pca.pdf", width = 5, height = 5)
p.pca
dev.off()
